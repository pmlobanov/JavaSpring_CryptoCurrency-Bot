package spbstu.mcs.telegramBot.DB.services;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;
import spbstu.mcs.telegramBot.DB.repositories.PortfolioRepository;
import spbstu.mcs.telegramBot.DB.repositories.UserRepository;
import spbstu.mcs.telegramBot.model.Currency;
import spbstu.mcs.telegramBot.model.Portfolio;
import spbstu.mcs.telegramBot.model.User;

import java.math.BigDecimal;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π.
 *
 * <p>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</p>
 * <ul>
 *   <li>–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π</li>
 *   <li>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤</li>
 *   <li>–†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è</li>
 *   <li>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ</li>
 * </ul>
 */
@Service
public class PortfolioService {
    private final PortfolioRepository portfolioRepository;
    private final UserRepository userRepository;
    private final UserService userService;
 //   private final PriceFetcher priceFetcher;
//    private final CurrencyConverter currencyConverter;
    private final ObjectMapper objectMapper;

    @Autowired
    private MongoTemplate mongoTemplate;

    @Autowired
    public PortfolioService(PortfolioRepository portfolioRepository, 
                          UserRepository userRepository,
                          @Lazy UserService userService,
                         // PriceFetcher priceFetcher,
                          //CurrencyConverter currencyConverter,
                          ObjectMapper objectMapper) {
        this.portfolioRepository = portfolioRepository;
        this.userRepository = userRepository;
        this.userService = userService;
    //    this.priceFetcher = priceFetcher;
    //    this.currencyConverter = currencyConverter;
        this.objectMapper = objectMapper;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
     * @throws org.springframework.dao.DataAccessException –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    public Mono<Portfolio> createPortfolio(String chatId) {
        return userService.getUserByChatId(chatId)
            .switchIfEmpty(Mono.error(new RuntimeException("User not found")))
            .flatMap(user -> {
                Portfolio portfolio = new Portfolio(chatId);
                Portfolio savedPortfolio = portfolioRepository.save(portfolio);
                // –î–æ–±–∞–≤–ª—è–µ–º portfolioId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º userTgName
                return userService.addPortfolioToUser(chatId, savedPortfolio.getId(), user.getUserTgName())
                    .thenReturn(savedPortfolio);
            });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
     *
     * @param portfolioId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
     * @return –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
     * @throws NoSuchElementException –µ—Å–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    public Portfolio getPortfolio(String portfolioId) {
        Optional<Portfolio> portfolio = portfolioRepository.findById(portfolioId);
        if (portfolio.isEmpty()) {
            throw new RuntimeException("Portfolio not found");
        }
        return portfolio.get();
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
     *
     * @param portfolioName –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
     * @return –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
     * @throws NoSuchElementException –µ—Å–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    public Portfolio getPortfolioId(String portfolioName) {
        return portfolioRepository.findByName(portfolioName);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å.
     *
     * @param portfolioId ID –ø–æ—Ä—Ç—Ñ–µ–ª—è
     * @throws NoSuchElementException –µ—Å–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    public void deletePortfolio(String portfolioId) {
        Portfolio portfolio = getPortfolio(portfolioId);
        portfolioRepository.delete(portfolio);
    }

    public List<Portfolio> getUserPortfolios(String userTgName) {
        User user = userRepository.findByUserTgName(userTgName);
        if (user == null) {
            throw new RuntimeException("User not found");
        }
        return portfolioRepository.findAllById(user.getPortfolioIds());
    }

    public Portfolio addCryptoToPortfolio(String portfolioId, Currency.Crypto crypto, BigDecimal amount) {
        Portfolio portfolio = portfolioRepository.findById(portfolioId)
            .orElseThrow(() -> new RuntimeException("Portfolio not found"));

        if (amount.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Amount must be positive");
        }

        if (portfolio.getCryptoCurrency() == null || portfolio.getCryptoCurrency() == crypto) {
            portfolio.setCryptoCurrency(crypto);
            portfolio.setCount(portfolio.getCount() == null ? amount : portfolio.getCount().add(amount));
        } else {
            throw new IllegalArgumentException("Portfolio already contains a different cryptocurrency");
        }

        return portfolioRepository.save(portfolio);
    }

    public Portfolio removeCryptoFromPortfolio(String portfolioId, Currency.Crypto crypto, BigDecimal amount) {
        Portfolio portfolio = portfolioRepository.findById(portfolioId)
            .orElseThrow(() -> new RuntimeException("Portfolio not found"));

        if (amount.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Amount must be positive");
        }

        if (portfolio.getCryptoCurrency() != crypto) {
            throw new IllegalArgumentException("Portfolio does not contain this cryptocurrency");
        }

        BigDecimal currentAmount = portfolio.getCount();
        if (currentAmount.compareTo(amount) < 0) {
            throw new IllegalArgumentException("Insufficient amount");
        }

        portfolio.setCount(currentAmount.subtract(amount));
        if (portfolio.getCount().compareTo(BigDecimal.ZERO) == 0) {
            portfolio.setCryptoCurrency(null);
        }

        return portfolioRepository.save(portfolio);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
     *
     * @param portfolio –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @return —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
     * @throws org.springframework.dao.DataAccessException –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    public Portfolio savePortfolio(Portfolio portfolio) {
        if (portfolio == null) {
            throw new IllegalArgumentException("Portfolio cannot be null");
        }
        return portfolioRepository.save(portfolio);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —á–∞—Ç–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @throws org.springframework.dao.DataAccessException –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
     */
    public List<Portfolio> getPortfoliosByChatId(String chatId) {
        return portfolioRepository.findByChatId(chatId);
    }

    public Mono<String> getPortfolioInfo(String portfolioId) {
        return Mono.fromCallable(() -> {
            Portfolio portfolio = portfolioRepository.findById(portfolioId)
                .orElseThrow(() -> new RuntimeException("Portfolio not found"));

            StringBuilder response = new StringBuilder();
            response.append("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ\n\n");

            if (portfolio.getCryptoCurrency() != null) {
                response.append("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: ").append(portfolio.getCryptoCurrency().getCode()).append("\n");
                response.append("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ").append(portfolio.getCount()).append("\n");
                
                if (portfolio.getLastCryptoPrice() != null) {
                    response.append("–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–Ω–∞: ")
                           .append(portfolio.getLastCryptoPrice())
                           .append("\n");
                }
            } else {
                response.append("–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç\n");
            }

            return response.toString();
        });
    }

//    public Mono<String> getPortfolioValue(String portfolioId) {
//        return Mono.fromCallable(() -> {
//            Portfolio portfolio = portfolioRepository.findById(portfolioId)
//                .orElseThrow(() -> new RuntimeException("Portfolio not found"));
//
//            if (portfolio.getCryptoCurrency() == null) {
//                return Mono.just("–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç");
//            }
//
//            return priceFetcher.getCurrentPrice(portfolio.getCryptoCurrency())
//                .flatMap(priceJson -> {
//                    try {
//                        JsonNode node = objectMapper.readTree(priceJson);
//                        BigDecimal currentPrice = new BigDecimal(node.get("price").asText());
//                        BigDecimal totalValue = portfolio.getCount().multiply(currentPrice);
//
//                        portfolio.setLastCryptoPrice(currentPrice);
//                        portfolio.setLastCryptoPriceTimestamp(System.currentTimeMillis() / 1000);
//                        portfolioRepository.save(portfolio);
//
//                        return Mono.just(String.format("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: %.2f",
//                            totalValue));
//                    } catch (Exception e) {
//                        return Mono.error(e);
//                    }
//                });
//        }).flatMap(mono -> mono);
//    }

    public Portfolio save(Portfolio portfolio) {
        return portfolioRepository.save(portfolio);
    }

    public Portfolio delete(Portfolio portfolio) {
        portfolioRepository.delete(portfolio);
        return portfolio;
    }

    public Optional<Portfolio> findById(String portfolioId) {
        return this.portfolioRepository.findById(portfolioId);
    }

    public List<Portfolio> findByChatId(String chatId) {
        return this.portfolioRepository.findByChatId(chatId);
    }

    public void deleteById(String testPortfolioId) {
        this.portfolioRepository.deleteById(testPortfolioId);
    }
}