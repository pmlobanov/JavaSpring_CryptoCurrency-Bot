package spbstu.mcs.telegramBot.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import spbstu.mcs.telegramBot.model.Currency;
import spbstu.mcs.telegramBot.cryptoApi.CryptoInformation;
import spbstu.mcs.telegramBot.service.AlertsHandling;
import spbstu.mcs.telegramBot.DB.services.UserService;
import spbstu.mcs.telegramBot.model.User;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import reactor.core.publisher.Mono;
import java.math.BigDecimal;
import org.springframework.stereotype.Service;
import spbstu.mcs.telegramBot.DB.services.NotificationService;
import spbstu.mcs.telegramBot.model.Notification;
import java.util.List;
import java.util.ArrayList;
import reactor.core.publisher.Flux;
import java.math.RoundingMode;
import spbstu.mcs.telegramBot.cryptoApi.CurrencyConverter;
import spbstu.mcs.telegramBot.cryptoApi.PriceFetcher;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Comparator;
import java.util.stream.Collectors;
import java.util.Map;
import spbstu.mcs.telegramBot.DB.services.PortfolioService;
import spbstu.mcs.telegramBot.model.Portfolio;
import com.fasterxml.jackson.databind.node.ObjectNode;
import lombok.extern.slf4j.Slf4j;
import spbstu.mcs.telegramBot.cryptoApi.CryptoPortfolioManager;
import spbstu.mcs.telegramBot.DB.services.AdminService;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞.
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è:
 * - –û–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
 * - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
 * - –ü–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö
 */
@Component
@Service
@Slf4j
public class BotCommand {
    private final CryptoInformation cryptoInformation;
    private final ObjectMapper objectMapper;
    private final AlertsHandling alertsHandling;
    private final TelegramBotService telegramBotService;
    private final UserService userService;
    private final NotificationService notificationService;
    private final CurrencyConverter currencyConverter;
    private final PriceFetcher priceFetcher;
    private final PortfolioService portfolioService;
    private final CryptoPortfolioManager cryptoPortfolioManager;
    private final AdminService adminService;

    @Autowired
    public BotCommand(CryptoInformation cryptoInformation, 
                     ObjectMapper objectMapper,
                     AlertsHandling alertsHandling,
                     TelegramBotService telegramBotService,
                     UserService userService,
                     NotificationService notificationService,
                     CurrencyConverter currencyConverter,
                     PriceFetcher priceFetcher,
                     PortfolioService portfolioService,
                     CryptoPortfolioManager cryptoPortfolioManager,
                     AdminService adminService) {
        this.cryptoInformation = cryptoInformation;
        this.objectMapper = objectMapper;
        this.alertsHandling = alertsHandling;
        this.telegramBotService = telegramBotService;
        this.userService = userService;
        this.notificationService = notificationService;
        this.currencyConverter = currencyConverter;
        this.priceFetcher = priceFetcher;
        this.portfolioService = portfolioService;
        this.cryptoPortfolioManager = cryptoPortfolioManager;
        this.adminService = adminService;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     * @param args –°—Ç—Ä–æ–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
     * @param expectedCount –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
     * @return –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω—ã, –∏–Ω–∞—á–µ null
     */
    private String[] processArguments(String args, int expectedCount) {
        log.info("Processing arguments: '{}', expected count: {}", args, expectedCount);
        
        if (args == null || args.trim().isEmpty()) {
            log.info("Args are null or empty, returning {}", expectedCount == 0 ? "empty array" : "null");
            return expectedCount == 0 ? new String[0] : null;
        }
        
        String[] splitArgs = args.trim().split("\\s+");
        log.info("Split arguments: {}", String.join(", ", splitArgs));
        
        if (splitArgs.length != expectedCount) {
            log.info("Argument count mismatch: got {}, expected {}", splitArgs.length, expectedCount);
            return null;
        }
        
        log.info("Returning valid arguments");
        return splitArgs;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
     * @return –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public String handlerStart() {
        return "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BitBotX ‚Äî –≤–∞—à–µ–≥–æ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!\n" +
                "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n" +
                "üîπ –£–∑–Ω–∞–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ BTC, ETH –∏ –¥—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.\n" +
                "üîπ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n" +
                "üîπ –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∫—É—Ä—Å—ã —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤.\n" +
                "üîπ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º: –¥–æ–±–∞–≤–ª—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –∏ —É–±—ã—Ç–∫–∏.\n" +
                "üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω.\n" +
                "‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ /help, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!\n" +
                "üìà –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∑–∞–ø—Ä–æ—Å.";
    }

    public String handlerStart(String args) {
        // This command expects 0 arguments
        String[] processedArgs = processArguments(args, 0);
        if (processedArgs == null) {
            return "\u274C –ö–æ–º–∞–Ω–¥–∞ /start –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤";
        }
        
        return handlerStart();
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
     * @return –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
     */
    public String handlerHelp() {
        // –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–∂–∏–¥–∞–µ—Ç 0 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        return "\uD83D\uDCDA BitBotX Help Center\n" +
                "–í–∞—à –≥–∏–¥ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç–∞\n" +
                "\uD83D\uDD39 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "‚ñ∏ /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n" +
                "‚ñ∏ /help - –≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ –º–µ–Ω—é\n" +
                "‚ñ∏ /authors - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤\n" +
                "‚ñ∏ /set_fiat <–≤–∞–ª—é—Ç–∞> - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–∞—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n" +
                "‚ñ∏ /set_crypto <–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞> - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n" +
                "\uD83D\uDCCA –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω:\n" +
                "‚ñ∏ /show_current_price - –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n" +
                "‚ñ∏ /show_price_history <–ø–µ—Ä–∏–æ–¥> - –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã (3d/7d/1M)\n" +
                "‚ñ∏ /compare_currency <–≤–∞–ª—é—Ç–∞ 1> <–≤–∞–ª—é—Ç–∞ 2> <–ø–µ—Ä–∏–æ–¥> - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (3h/12h/24h - —á–∞—Å—ã, 3d/7d/30d - –¥–Ω–∏)\n" +
                "\uD83D\uDCBC –ü–æ—Ä—Ç—Ñ–µ–ª—å:\n" +
                "‚ñ∏ /add <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–≤–∞–ª—é—Ç–∞> - –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤\n" +
                "‚ñ∏ /remove <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–≤–∞–ª—é—Ç–∞> - –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤\n" +
                "‚ñ∏ /portfolio - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è\n" +
                "‚ñ∏ /get_portfolio_price - –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è\n" +
                "‚ñ∏ /get_assets_price - –¶–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤\n" +
                "‚ñ∏ /balance - –ë–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è\n" +
                "‚ñ∏ /delete_asset <–≤–∞–ª—é—Ç–∞> - –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤\n" +
                "‚ñ∏ /delete_all_assets - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤—ã\n" +
                "\uD83D\uDD14 –û–ø–æ–≤–µ—â–µ–Ω–∏—è:\n" +
                "‚ñ∏ /set_alert_ema <–≤–∞–ª—é—Ç–∞> - –ü–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É\n" +
                "‚ñ∏ /set_alert_val <–≤–∞–ª—é—Ç–∞> <–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞> <–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞> - –ü–æ —Ü–µ–Ω–µ\n" +
                "‚ñ∏ /set_alert_perc <–≤–∞–ª—é—Ç–∞> <–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç> <–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫> - –ü–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º\n" +
                "‚ñ∏ /my_alerts - –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n" +
                "‚ñ∏ /delete_alert <—Ç–∏–ø> <–≤–∞–ª—é—Ç–∞> - –£–¥–∞–ª–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ\n" +
                "‚ñ∏ /delete_all_alerts - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π";
    }

    public String handlerHelp(String args) {
        // This command expects 0 arguments
        String[] processedArgs = processArguments(args, 0);
        if (processedArgs == null) {
            return "\u274C –ö–æ–º–∞–Ω–¥–∞ /help –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤";
        }
        
        return handlerHelp();
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /set_crypto
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
     */
    private String handlerSetCrypto() {
        return "\u274C –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC. –ù–∞–ø—Ä–∏–º–µ—Ä: /set_crypto BTC";
    }

    public String handlerSetCrypto(String args) {
        // Process arguments - we expect exactly 1 argument
        String[] processedArgs = processArguments(args, 1);
        if (processedArgs == null) {
            return handlerSetCrypto();
        }
        
        String cryptoCode = processedArgs[0];
        
        try {
            // Try to find matching crypto currency
            Currency.Crypto crypto = null;
            for (Currency.Crypto c : Currency.Crypto.values()) {
                if (c.getCode().equalsIgnoreCase(cryptoCode)) {
                    crypto = c;
                    break;
                }
            }
            
            if (crypto == null) {
                return "\u274C –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —Å –∫–æ–¥–æ–º " + cryptoCode + " –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–¥–æ–≤: " +
                       "BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC. –ù–∞–ø—Ä–∏–º–µ—Ä: /set_crypto BTC";
            }
            
            // Check if this crypto is already set as current
            if (crypto == Currency.Crypto.getCurrentCrypto()) {
                return "\u2139Ô∏è –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ " + crypto.getCode() + " —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–∫—É—â–µ–π.";
            }
            
            Currency.Crypto.setCurrentCrypto(crypto);
            return "üí± –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –±–∞–∑–æ–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω " + crypto.getCode();
        } catch (Exception e) {
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: " + e.getMessage();
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /set_fiat
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
     */
    private String handlerSetFiat() {
        return "\u274C –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç: USD, EUR, JPY, GBP, RUB, CNY. –ù–∞–ø—Ä–∏–º–µ—Ä: /set_fiat USD";
    }

    public String handlerSetFiat(String args) {
        // Process arguments - we expect exactly 1 argument
        String[] processedArgs = processArguments(args, 1);
        if (processedArgs == null) {
            return handlerSetFiat();
        }
        
        String fiatCode = processedArgs[0];
        
        try {
            // Try to find matching fiat currency
            Currency.Fiat fiat = null;
            for (Currency.Fiat f : Currency.Fiat.values()) {
                if (f.getCode().equalsIgnoreCase(fiatCode)) {
                    fiat = f;
                    break;
                }
            }
            
            if (fiat == null) {
                return "\u274C –§–∏–∞—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ —Å –∫–æ–¥–æ–º " + fiatCode + " –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–¥–æ–≤: " +
                       "USD, EUR, JPY, GBP, RUB, CNY. –ù–∞–ø—Ä–∏–º–µ—Ä: /set_fiat USD";
            }
            
            if (fiat == Currency.Fiat.getCurrentFiat()) {
                return "\u2139Ô∏è –§–∏–∞—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ " + fiat.getCode() + " —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–∫—É—â–µ–π.";
            }
            
            Currency.Fiat.setCurrentFiat(fiat);
            return "üí± –§–∏–∞—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—Å–µ —Ü–µ–Ω—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ " + fiat.getCode();
        } catch (Exception e) {
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∏–∞—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã: " + e.getMessage();
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /show_current_price
     * @return –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
     */
    public Mono<String> handlerShowCurrentPrice(String args) {
        log.info("Processing /show_current_price command with args: {}", args);
        // This command expects 0 arguments
        String[] processedArgs = processArguments(args, 0);
        if (processedArgs == null) {
            log.info("Invalid arguments for /show_current_price command");
            return Mono.just("\u274C –ö–æ–º–∞–Ω–¥–∞ /show_current_price –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤");
        }
        
        log.info("Calling handlerShowCurrentPrice()");
        return handlerShowCurrentPrice()
            .doOnNext(response -> log.info("Got response from handlerShowCurrentPrice: {}", response))
            .doOnError(error -> log.error("Error in handlerShowCurrentPrice: {}", error.getMessage()));
    }
    
    private Mono<String> handlerShowCurrentPrice() {
        log.info("Getting current price from cryptoInformation");
        return cryptoInformation.showCurrentPrice()
            .doOnNext(jsonPrice -> log.info("Received price data: {}", jsonPrice))
            .map(jsonPrice -> {
                try {
                    JsonNode node = objectMapper.readTree(jsonPrice);
                    String symbol = node.get("symbol").asText();
                    String price = node.get("price").asText();
                    long timestamp = node.get("timestamp").asLong();
                    
                    log.info("Processing price data - symbol: {}, price: {}, timestamp: {}", symbol, price, timestamp);
                    
                    // Format the date in UTC+3
                    java.time.ZonedDateTime dateTime = java.time.Instant.ofEpochSecond(timestamp)
                        .atZone(java.time.ZoneId.of("Europe/Moscow"));
                    String formattedDate = dateTime.format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss"));
                    
                    // Get crypto name
                    String cryptoName = "";
                    for (Currency.Crypto crypto : Currency.Crypto.values()) {
                        if (symbol.startsWith(crypto.getCode())) {
                            cryptoName = crypto.getName();
                            break;
                        }
                    }
                    
                    String response = String.format("üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n" +
                                       "‚û°Ô∏è %s (%s):\n" +
                                       "üí∞ %s (–ø–æ –∫—É—Ä—Å—É %s)\n" +
                                       "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: –°–µ–≥–æ–¥–Ω—è, %s (UTC+3)",
                                       symbol.split("-")[0], cryptoName, price, 
                                       Currency.Fiat.getCurrentFiat().getCode(), formattedDate);
                    
                    log.info("Formatted response: {}", response);
                    return response;
                } catch (Exception e) {
                    log.error("Error processing price data: {}", e.getMessage(), e);
                    return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage();
                }
            })
            .onErrorResume(throwable -> {
                log.error("Error getting current price: {}", throwable.getMessage(), throwable);
                return Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: " + throwable.getMessage());
            });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
     * @param period –ü–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
     * @return –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω
     */
    private Mono<String> formatPriceHistory(String period) {
        return cryptoInformation.showPriceHistory(period)
            .map(jsonPrice -> {
                try {
                    JsonNode node = objectMapper.readTree(jsonPrice);
                    String symbol = node.get("symbol").asText();
                    String firstPrice = node.get("firstPrice").asText();
                    String lastPrice = node.get("lastPrice").asText();
                    String percentChange = node.get("percentChange").asText();
                    String minPrice = node.get("minPrice").asText();
                    String maxPrice = node.get("maxPrice").asText();
                    long currentTimestamp = node.get("currentTimestamp").asLong();
    
                    // Format the current time in UTC+3
                    java.time.ZonedDateTime dateTime = java.time.Instant.ofEpochSecond(currentTimestamp)
                        .atZone(java.time.ZoneId.of("Europe/Moscow"));
                    String formattedTime = dateTime.format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss"));
    
                    // Get crypto name
                    String cryptoName = "";
                    for (Currency.Crypto crypto : Currency.Crypto.values()) {
                        if (symbol.startsWith(crypto.getCode())) {
                            cryptoName = crypto.getName();
                            break;
                        }
                    }
    
                    // Format the history data
                    StringBuilder historyTable = new StringBuilder();
                    // –®–∞–ø–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
                    historyTable.append(String.format("%-17s | %12s\n", "üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–¶–µ–Ω–∞ (" + Currency.Fiat.getCurrentFiat().getCode() + ")"));
                    historyTable.append("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî|‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n");
    
                    JsonNode history = node.get("history");
                    for (JsonNode priceNode : history) {
                        long timestamp = priceNode.get("timestamp").asLong();
                        String price = priceNode.get("price").asText();
    
                        java.time.ZonedDateTime priceDateTime = java.time.Instant.ofEpochSecond(timestamp)
                            .atZone(java.time.ZoneId.of("Europe/Moscow"));
                        String formattedDate = priceDateTime.format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));
    
                        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ
                        historyTable.append(String.format("%-19s | %12s\n", formattedDate, price));
                    }
    
                    // Format the change percentage with sign
                    String changeSign = Double.parseDouble(percentChange) >= 0 ? "+" : "";
    
                    return String.format("%s\n\nüìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥:\n%s%s%% (—Å %s –¥–æ %s)\n" +
                                       "üìå –ú–∏–Ω–∏–º—É–º: %s ‚à£ –ú–∞–∫—Å–∏–º—É–º: %s\n" +
                                       "üîç –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –°–µ–≥–æ–¥–Ω—è, %s",
                                       historyTable.toString(),
                                       changeSign, percentChange, firstPrice, lastPrice,
                                       minPrice, maxPrice, formattedTime);
                } catch (Exception e) {
                    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage();
                }
            })
            .onErrorResume(throwable -> Mono.just("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: " + throwable.getMessage()));
    }
    
    
    public Mono<String> handlerShowPriceHistory(String args) {
        // This command expects 1 argument (period)
        String[] processedArgs = processArguments(args, 1);
        if (processedArgs == null) {
            return Mono.just("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: /show_price_history 7d");
        }
        
        String period = processedArgs[0];
        // Validate period format
        if (!period.matches("^(3h|12h|24h|3d|7d|1M)$")) {
            return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:\n" +
                           "‚ñ∏ 3h, 12h, 24h - —á–∞—Å—ã\n" +
                           "‚ñ∏ 3d, 7d, 1M - –¥–Ω–∏");
        }
        
        return formatPriceHistory(period);
    }

    public String handlerQ() {
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.";
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /compare_currency
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     * @return –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç
     */
    public Mono<String> handlerCompareCurrency(String args) {
        // Process arguments - we expect exactly 3 arguments
        String[] processedArgs = processArguments(args, 3);
        if (processedArgs == null) {
            return Mono.just("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–≤–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –ø–µ—Ä–∏–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: /compare_currency BTC SOL 7d");
        }
        
        String crypto1Code = processedArgs[0];
        String crypto2Code = processedArgs[1];
        String period = processedArgs[2];
        
        // Validate period format
        if (!period.matches("^(3h|12h|24h|3d|7d|1M)$")) {
            return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:\n" +
                           "‚ñ∏ 3h, 12h, 24h - —á–∞—Å—ã\n" +
                           "‚ñ∏ 3d, 7d, 1M - –¥–Ω–∏");
        }
        
        try {
            // Try to find matching crypto currencies
            final Currency.Crypto crypto1 = findCryptoByCode(crypto1Code);
            final Currency.Crypto crypto2 = findCryptoByCode(crypto2Code);
            
            if (crypto1 == null || crypto2 == null) {
                return Mono.just("‚ùå –û–¥–Ω–∞ –∏–ª–∏ –æ–±–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–¥—ã: " +
                               "BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC");
            }
            
            return cryptoInformation.compareCurrencies(crypto1, crypto2, period)
                .map(json -> {
                    try {
                        JsonNode node = objectMapper.readTree(json);
                        String symbol1 = node.get("symbol1").get("symbol").asText();
                        String symbol2 = node.get("symbol2").get("symbol").asText();
                        
                        String currentPrice1 = node.get("symbol1").get("currentPrice").asText();
                        String historicPrice1 = node.get("symbol1").get("historicPrice").asText();
                        String change1 = node.get("symbol1").get("change").asText();
                        
                        String currentPrice2 = node.get("symbol2").get("currentPrice").asText();
                        String historicPrice2 = node.get("symbol2").get("historicPrice").asText();
                        String change2 = node.get("symbol2").get("change").asText();
                        
                        String currentRatio = node.get("ratio").get("currentRatio").asText();
                        String historicRatio = node.get("ratio").get("historicRatio").asText();
                        String ratioChange = node.get("ratio").get("change").asText();
                        
                        // Get crypto names
                        String crypto1Name = crypto1.getName();
                        String crypto2Name = crypto2.getName();
                        
                        // Format the output
                        StringBuilder output = new StringBuilder();
                        output.append(String.format("üí±  –°–†–ê–í–ù–ï–ù–ò–ï –ö–£–†–°–û–í (%s)\n\n", period));

                        String currentFiatCode = Currency.Fiat.getCurrentFiat().getCode(); 
                        
                        // First crypto
                        output.append(String.format("üí∞ %s (%s)\n", crypto1Code, crypto1Name));
                        output.append(String.format("üìà –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: %s (%s)\n", currentPrice1, currentFiatCode));
                        output.append(String.format("üìà –¶–µ–Ω–∞ —Ç–æ–≥–¥–∞: %s (%s)\n\n", historicPrice1, currentFiatCode));
                        
                        output.append("üÜö \n\n");                       
                        
                        // Second crypto
                        output.append(String.format("üí∞ %s (%s)\n", crypto2Code, crypto2Name));
                        output.append(String.format("üìà –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: %s (%s)\n", currentPrice2, currentFiatCode));
                        output.append(String.format("üìà –¶–µ–Ω–∞ —Ç–æ–≥–¥–∞: %s (%s)\n\n", historicPrice2, currentFiatCode));
                        
                        // Changes
                        output.append("üìÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥:\n");
                        output.append(String.format("%s: %s%s%% \n", crypto1Code, 
                            Double.parseDouble(change1) >= 0 ? "‚ñ≤ +" : "‚ñº ", change1));
                        output.append(String.format("%s: %s%s%% \n\n", crypto2Code,
                            Double.parseDouble(change2) >= 0 ? "‚ñ≤ +" : "‚ñº ", change2));
                        
                        // Ratio
                        output.append("üí° –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ " + crypto1Code + "/" + crypto2Code + ": \n");
                        output.append(String.format("–°–µ–π—á–∞—Å 1 %s = %s %s\n", crypto1Code, currentRatio, crypto2Code));
                        output.append(String.format("–¢–æ–≥–¥–∞: 1 %s = %s %s\n", crypto1Code, historicRatio, crypto2Code));
                        output.append(String.format("–ò–∑–º–µ–Ω–µ–Ω–∏–µ: %s%s%%", 
                            Double.parseDouble(ratioChange) >= 0 ? "‚ñ≤ +" : "‚ñº ", ratioChange));
                        
                        return output.toString();
                    } catch (Exception e) {
                        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç: " + e.getMessage();
                    }
                })
                .onErrorResume(throwable -> Mono.just("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç: " + throwable.getMessage()));
        } catch (Exception e) {
            return Mono.just("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç: " + e.getMessage());
        }
    }
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–æ –∫–æ–¥—É
     * @param code –ö–æ–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
     * @return –ù–∞–π–¥–µ–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∏–ª–∏ null
     */
    private Currency.Crypto findCryptoByCode(String code) {
        for (Currency.Crypto c : Currency.Crypto.values()) {
            if (c.getCode().equalsIgnoreCase(code)) {
                return c;
            }
        }
        return null;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /set_alert_val
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
     */
    private String handlerSetAlertVal() {
        return "\u274C –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /set_alert_VAL BTC 65000 63000";
    }

    public Mono<String> handlerSetAlertVal(String args, String chatId) {
        // Process arguments - we expect exactly 3 arguments
        String[] processedArgs = processArguments(args, 3);
        if (processedArgs == null) {
            return Mono.just(handlerSetAlertVal());
        }
        
        String cryptoCode = processedArgs[0];
        String maxPriceStr = processedArgs[1];
        String minPriceStr = processedArgs[2];
        
        try {
            // Validate crypto code
            Currency.Crypto crypto = null;
            for (Currency.Crypto c : Currency.Crypto.values()) {
                if (c.getCode().equalsIgnoreCase(cryptoCode)) {
                    crypto = c;
                    break;
                }
            }
            
            if (crypto == null) {
                return Mono.just("\u274C –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —Å –∫–æ–¥–æ–º " + cryptoCode + " –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–¥–æ–≤: " +
                       "BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –±–µ–∑ –∑–Ω–∞–∫–∞ –ø–ª—é—Å)
            if (!maxPriceStr.matches("^\\d+(\\.\\d+)?$") || !minPriceStr.matches("^\\d+(\\.\\d+)?$")) {
                return Mono.just("\u274C –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –±–µ–∑ –∑–Ω–∞–∫–∞ –ø–ª—é—Å");
            }
            
            // Parse prices
            BigDecimal maxPrice = new BigDecimal(maxPriceStr);
            BigDecimal minPrice = new BigDecimal(minPriceStr);
            
            if (maxPrice.compareTo(BigDecimal.ZERO) <= 0 || minPrice.compareTo(BigDecimal.ZERO) <= 0) {
                return Mono.just("\u274C –¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏");
            }
            
            if (maxPrice.compareTo(minPrice) <= 0) {
                return Mono.just("\u274C –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π");
            }
            
            // Set the alert
            return alertsHandling.setAlertVal(crypto, maxPrice, minPrice, chatId);
            
        } catch (NumberFormatException e) {
            return Mono.just("\u274C –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞");
        } catch (Exception e) {
            return Mono.just("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–ª–µ—Ä—Ç–∞: " + e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /set_alert_perc
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
     */
    private String handlerSetAlertPerc() {
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_alert_perc <–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞> <–ø—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞> <–ø—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è>\n" +
               "–ü—Ä–∏–º–µ—Ä: /set_alert_perc BTC 5.25 3.75\n" +
               "–ü—Ä–æ—Ü–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π";
    }

    public Mono<String> handlerSetAlertPerc(String args, String chatId) {
        String[] processedArgs = processArguments(args, 3);
        if (processedArgs == null) {
            return Mono.just(handlerSetAlertPerc());
        }

        String cryptoCode = processedArgs[0].toUpperCase();
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –±–µ–∑ –∑–Ω–∞–∫–∞ –ø–ª—é—Å)
            if (!processedArgs[1].matches("^\\d+(\\.\\d{1,2})?$") || !processedArgs[2].matches("^\\d+(\\.\\d{1,2})?$")) {
                return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –±–µ–∑ –∑–Ω–∞–∫–∞ –ø–ª—é—Å, –º–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π");
            }

            BigDecimal upPercent = new BigDecimal(processedArgs[1]);
            BigDecimal downPercent = new BigDecimal(processedArgs[2]);
            
            if (upPercent.compareTo(BigDecimal.ZERO) <= 0 || downPercent.compareTo(BigDecimal.ZERO) <= 0) {
                return Mono.just("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            Currency.Crypto crypto = findCryptoByCode(cryptoCode);
            if (crypto == null) {
                return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC");
            }

            return alertsHandling.setAlertPerc(crypto, upPercent, downPercent, chatId)
                .onErrorResume(e -> Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: " + e.getMessage()));
        } catch (NumberFormatException e) {
            return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –±–µ–∑ –∑–Ω–∞–∫–∞ –ø–ª—é—Å");
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /set_alert_ema
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
     */
    private String handlerSetAlertEMA() {
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_alert_ema <–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞>\n" +
               "–ü—Ä–∏–º–µ—Ä: /set_alert_ema BTC";
    }

    public Mono<String> handlerSetAlertEMA(String args, String chatId) {
        String[] processedArgs = processArguments(args, 1);
        if (processedArgs == null) {
            return Mono.just(handlerSetAlertEMA());
        }

        String cryptoCode = processedArgs[0].toUpperCase();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        Currency.Crypto crypto = findCryptoByCode(cryptoCode);
        if (crypto == null) {
            return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC");
        }

        return alertsHandling.setAlertEMA(crypto, chatId)
            .onErrorResume(e -> Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ EMA –∞–ª–µ—Ä—Ç–∞: " + e.getMessage()));
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /my_alerts
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
     */
    private String handlerMyAlerts() {
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /my_alerts\n" +
               "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –≤–∞—à–∏ –∞–ª–µ—Ä—Ç—ã.";
    }

    private static class AlertPricePair {
        private final Notification notification;
        private final String price;

        public AlertPricePair(Notification notification, String price) {
            this.notification = notification;
            this.price = price;
        }

        public Notification getNotification() {
            return notification;
        }

        public String getPrice() {
            return price;
        }
    }

    public Mono<String> handlerMyAlerts(String args, String chatId) {
        String[] processedArgs = processArguments(args, 0);
        if (processedArgs == null) {
            return Mono.just(handlerMyAlerts());
        }

        return notificationService.getAllUserAlerts(chatId)
            .collectList()
            .flatMap(notifications -> {
                if (notifications.isEmpty()) {
                    return Mono.just("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤.");
                }

                StringBuilder message = new StringBuilder("üîî –í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã:\n\n");
                
                // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (–∞–ª–µ—Ä—Ç, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞)
                List<Mono<AlertPricePair>> alertPriceMonos = new ArrayList<>();
                
                for (Notification notification : notifications) {
                    String type = notification.getThresholdType().toString();
                    String symbol = notification.getCryptoCurrency().toString();
                    String fiat = notification.getFiatCurrency().getCode();
                    
                    String typeEmoji = switch (type) {
                        case "VALUE" -> "üí∞";
                        case "PERCENT" -> "üìä";
                        case "EMA" -> "üìà";
                        default -> "‚ùì";
                    };
                    
                    message.append(String.format("%s %s (%s)\n", typeEmoji, symbol, type));
                    
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ USD –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≤–∞–ª—é—Ç—É –∏–∑ –ë–î
                    alertPriceMonos.add(Mono.zip(
                        priceFetcher.getCurrentPrice(notification.getCryptoCurrency()),
                        currencyConverter.getUsdToFiatRate(notification.getFiatCurrency())
                    ).flatMap(tuple -> {
                        try {
                            JsonNode node = objectMapper.readTree(tuple.getT1());
                            String priceStr = node.get("price").asText();
                            BigDecimal currentPriceUSD = new BigDecimal(priceStr);
                            BigDecimal conversionRate = tuple.getT2();
                            
                            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–∞–ª—é—Ç—É
                            BigDecimal currentPrice = currentPriceUSD.multiply(conversionRate)
                                .setScale(2, RoundingMode.HALF_UP);
                            
                            return Mono.just(new AlertPricePair(notification, 
                                String.format("   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.2f %s\n", currentPrice, fiat)));
                        } catch (Exception e) {
                            return Mono.just(new AlertPricePair(notification, "   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"));
                        }
                    }));
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–µ—Ä—Ç–µ
                    switch (type) {
                        case "VALUE" -> {
                            message.append(String.format("   –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: %.2f %s\n", 
                                notification.getUpperBoundary(), fiat));
                            message.append(String.format("   –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: %.2f %s\n", 
                                notification.getLowerBoundary(), fiat));
                            message.append(String.format("   –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: %.2f %s\n", 
                                notification.getStartPrice(), fiat));
                        }
                        case "PERCENT" -> {
                            message.append(String.format("   –†–æ—Å—Ç: +%.2f%%\n", 
                                notification.getUpPercent()));
                            message.append(String.format("   –ü–∞–¥–µ–Ω–∏–µ: -%.2f%%\n", 
                                notification.getDownPercent()));
                            message.append(String.format("   –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: %.2f %s\n", 
                                notification.getUpperBoundary(), fiat));
                            message.append(String.format("   –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: %.2f %s\n", 
                                notification.getLowerBoundary(), fiat));
                            message.append(String.format("   –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: %.2f %s\n", 
                                notification.getStartPrice(), fiat));
                        }
                        case "EMA" -> {
                            message.append(String.format("   –ù–∞—á–∞–ª—å–Ω–æ–µ EMA: %.2f %s\n", 
                                notification.getStartEMA(), fiat));
                            message.append(String.format("   –¢–µ–∫—É—â–µ–µ EMA: %.2f %s\n", 
                                notification.getCurrentEMA(), fiat));
                            message.append(String.format("   –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: %.2f %s\n", 
                                notification.getStartPrice(), fiat));
                        }
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –¥–ª—è VALUE –∏ PERCENT –∞–ª–µ—Ä—Ç–æ–≤
                    if (type.equals("VALUE") || type.equals("PERCENT")) {
                        String statusEmoji = notification.isActive() ? "‚úÖ" : "‚ùå";
                        message.append(String.format("   –°—Ç–∞—Ç—É—Å: %s\n", statusEmoji));
                        if (!notification.isActive() && notification.getTriggerTimestamp() != null) {
                            message.append(String.format("   –í—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: %s\n", 
                                formatDuration(notification.getTriggerTimestamp())));
                        } else {
                            message.append(String.format("   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %s\n", 
                                formatDuration(notification.getStartTimestamp())));
                        }
                    } else {
                        // –î–ª—è EMA –∞–ª–µ—Ä—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
                        message.append(String.format("   –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã: %s\n", 
                            formatDuration(notification.getStartTimestamp())));
                    }
                    
                    message.append("\n");
                }
                
                // –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω
                return Flux.fromIterable(alertPriceMonos)
                    .flatMap(mono -> mono)
                    .collectList()
                    .map(pairs -> {
                        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –∞–ª–µ—Ä—Ç–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                        pairs.sort((p1, p2) -> {
                            int index1 = notifications.indexOf(p1.getNotification());
                            int index2 = notifications.indexOf(p2.getNotification());
                            return Integer.compare(index1, index2);
                        });
                        
                        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        String[] lines = message.toString().split("\n");
                        StringBuilder finalMessage = new StringBuilder();
                        int priceIndex = 0;
                        
                        for (int i = 0; i < lines.length; i++) {
                            String line = lines[i];
                            finalMessage.append(line).append("\n");
                            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∏–ø–æ–º –∞–ª–µ—Ä—Ç–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏), –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                            if (line.contains("üí∞") || line.contains("üìä") || line.contains("üìà")) {
                                finalMessage.append(pairs.get(priceIndex).getPrice());
                                priceIndex++;
                            }
                        }
                        
                        return finalMessage.toString();
                    });
            })
            .onErrorResume(e -> Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤: " + e.getMessage()));
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     * @param timestamp –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
     * @return –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     */
    private String formatDuration(long timestamp) {
        java.time.ZonedDateTime dateTime = java.time.Instant.ofEpochSecond(timestamp)
            .atZone(java.time.ZoneId.of("Europe/Moscow"));
        return dateTime.format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"));
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /delete_alert
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
     */
    private String handlerDeleteAlert() {
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_alert <—Ç–∏–ø> <–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞>\n" +
               "–ü—Ä–∏–º–µ—Ä: /delete_alert VALUE BTC\n" +
               "–¢–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤: VALUE, PERCENT, EMA";
    }

    public Mono<String> handlerDeleteAlert(String args, String chatId) {
        String[] processedArgs = processArguments(args, 2);
        if (processedArgs == null) {
            return Mono.just(handlerDeleteAlert());
        }

        String type = processedArgs[0].toUpperCase();
        String symbol = processedArgs[1].toUpperCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        String fullType = switch (type) {
            case "VAL" -> "VALUE";
            case "PERC" -> "PERCENT";
            case "EMA" -> "EMA";
            default -> type;
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞
        if (!fullType.matches("^(VALUE|PERCENT|EMA)$")) {
            return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: VAL, PERC –∏–ª–∏ EMA");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        Currency.Crypto crypto = findCryptoByCode(symbol);
        if (crypto == null) {
            return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC");
        }

        return notificationService.getAllUserAlerts(chatId)
            .filter(alert -> alert.getThresholdType().toString().equals(fullType))
            .filter(alert -> alert.getCryptoCurrency().equals(crypto))
            .next()
            .flatMap(alert -> notificationService.delete(alert)
                .then(Mono.just(String.format("‚úÖ –ê–ª–µ—Ä—Ç %s –¥–ª—è %s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", type, symbol))))
            .switchIfEmpty(Mono.just(String.format("‚ùå –ê–ª–µ—Ä—Ç %s –¥–ª—è %s –Ω–µ –Ω–∞–π–¥–µ–Ω", type, symbol)))
            .onErrorResume(e -> Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞: " + e.getMessage()));
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /delete_all_alerts
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
     */
    private String handlerDeleteAllAlerts() {
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_all_alerts\n" +
               "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã.";
    }

    public Mono<String> handlerDeleteAllAlerts(String args, String chatId) {
        String[] processedArgs = processArguments(args, 0);
        if (processedArgs == null) {
            return Mono.just(handlerDeleteAllAlerts());
        }

        return notificationService.getAllUserAlerts(chatId)
            .collectList()
            .flatMap(alerts -> {
                if (alerts.isEmpty()) {
                    return Mono.just("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
                }

                return Flux.fromIterable(alerts)
                    .flatMap(alert -> notificationService.delete(alert))
                    .then(Mono.just(String.format("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ %d –∞–ª–µ—Ä—Ç–æ–≤!", alerts.size())));
            })
            .onErrorResume(e -> Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤: " + e.getMessage()));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return Mono —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π Mono
     */
    private Mono<String> checkUserStarted(String chatId) {
        return userService.getUserByChatId(chatId)
            .map(user -> user.isHasStarted())
            .defaultIfEmpty(false)
            .flatMap(hasStarted -> {
                if (!hasStarted) {
                    return Mono.just("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start");
                }
                return Mono.empty();
            });
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É
     * @param command –ö–æ–º–∞–Ω–¥–∞
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return Mono<Void>
     */
    public Mono<Void> processCommand(String command, String[] args, String chatId) {
        log.info("Received command: '{}' with args: {}", command, args != null ? String.join(" ", args) : "none");
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /start, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
        if (!command.equals("/start")) {
            return checkUserStarted(chatId)
                .flatMap(errorMessage -> {
                    if (errorMessage != null) {
                        log.info("User has not started: {}", errorMessage);
                        return telegramBotService.sendResponseAsync(chatId, errorMessage);
                    }
                    log.info("User has started, processing command: {}", command);
                    return processCommandInternal(command, args, chatId);
                })
                .switchIfEmpty(Mono.defer(() -> {
                    log.info("User has started (empty check), processing command: {}", command);
                    return processCommandInternal(command, args, chatId);
                }));
        }
        log.info("Processing /start command");
        return processCommandInternal(command, args, chatId);
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
     * @param command –ö–æ–º–∞–Ω–¥–∞
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return Mono<Void>
     */
    private Mono<Void> processCommandInternal(String command, String[] args, String chatId) {
        String argsStr = args != null ? String.join(" ", args) : "";
        String normalizedCommand = command.trim().toLowerCase();
        
        return switch (normalizedCommand) {
            case "/start" -> {
                yield userService.getUserByChatId(chatId)
                    .flatMap(user -> {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å
                        if (!user.isHasStarted()) {
                            user.setHasStarted(true);
                            log.info("Setting hasStarted=true for existing user with chatId: {}", chatId);
                            return userService.save(user)
                                .doOnSuccess(u -> log.info("Successfully updated user hasStarted status for chatId: {}", chatId))
                                .doOnError(e -> log.error("Error updating user status: {}", e.getMessage()))
                                .then(telegramBotService.sendResponseAsync(chatId, handlerStart(argsStr)));
                        } else {
                            // –î–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                            // –≤–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
                            log.info("User already active, sending normal welcome message for chatId: {}", chatId);
                            return telegramBotService.sendResponseAsync(chatId, handlerStart(argsStr));
                        }
                    })
                    .switchIfEmpty(Mono.defer(() -> {
                        log.info("Creating brand new user with chatId: {}", chatId);
                        User newUser = new User(null, chatId);
                        newUser.setHasStarted(true);
                        return userService.save(newUser)
                            .doOnSuccess(u -> log.info("Successfully created new user with hasStarted=true"))
                            .doOnError(e -> log.error("Error creating new user: {}", e.getMessage()))
                            .then(telegramBotService.sendResponseAsync(chatId, handlerStart(argsStr)));
                    }));
            }
            case "/help" -> telegramBotService.sendResponseAsync(chatId, handlerHelp(argsStr));
            case "/set_crypto" -> telegramBotService.sendResponseAsync(chatId, handlerSetCrypto(argsStr));
            case "/set_fiat" -> telegramBotService.sendResponseAsync(chatId, handlerSetFiat(argsStr));
            case "/show_current_price" -> handlerShowCurrentPrice(argsStr)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/show_price_history" -> handlerShowPriceHistory(argsStr)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/compare_currency" -> handlerCompareCurrency(argsStr)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/portfolio" -> handlerPortfolio(argsStr, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/get_portfolio_price" -> handlerGetPortfolioPrice(argsStr, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/get_assets_price" -> handlerGetPortfolioAssets(argsStr, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/balance" -> handlerBalance(chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/set_alert_val" -> handlerSetAlertVal(argsStr, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/set_alert_perc" -> handlerSetAlertPerc(argsStr, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/set_alert_ema" -> handlerSetAlertEMA(argsStr, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/my_alerts" -> handlerMyAlerts(argsStr, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/delete_alert" -> handlerDeleteAlert(argsStr, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/delete_all_alerts" -> handlerDeleteAllAlerts(argsStr, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/add" -> handlerAdd(args, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/remove" -> handlerRemove(args, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/delete_asset" -> handlerDeleteAsset(argsStr, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/delete_all_assets" -> handlerDeleteAllAssets(argsStr, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/authors" -> handlerAuthors(argsStr)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/admin_create" -> handlerAdminCreate(args, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/admin_refresh_key" -> handlerAdminRefreshKey(args, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            case "/admin_deactivate" -> handlerAdminDeactivate(args, chatId)
                .flatMap(response -> telegramBotService.sendResponseAsync(chatId, response));
            default -> telegramBotService.sendResponseAsync(chatId, 
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
        };
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /add
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
     */
    private String handlerAdd() {
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞>\n" +
               "–ü—Ä–∏–º–µ—Ä: /add 0.42 ETH\n" +
               "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC";
    }

    public Mono<String> handlerAdd(String[] args, String chatId) {
        if (args.length != 2) {
            return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞>\n" +
                    "–ü—Ä–∏–º–µ—Ä: /add 0.42 ETH\n" +
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC");
        }

        try {
            BigDecimal amount = new BigDecimal(args[0]);
            if (amount.compareTo(BigDecimal.ZERO) <= 0) {
                return Mono.just("‚ùå –ù–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!");
            }
            String cryptoCode = args[1].toUpperCase();
            Currency.Crypto crypto = Currency.Crypto.valueOf(cryptoCode);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            List<Portfolio> portfolios = portfolioService.getPortfoliosByChatId(chatId);
            final Portfolio portfolio;
            
            if (portfolios.stream()
                    .filter(p -> p.getCryptoCurrency() != null && p.getCryptoCurrency().equals(crypto))
                    .findFirst()
                    .orElse(null) == null) {
                // –ï—Å–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è —ç—Ç–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                return userService.getUserByChatId(chatId)
                    .flatMap(user -> {
                        if (user == null) {
                            return Mono.just("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start");
                        }
                        return portfolioService.createPortfolio(chatId)
                            .flatMap(newPortfolio -> {
                                newPortfolio.setCryptoCurrency(crypto);
                                final Portfolio currentPortfolio = newPortfolio;
                                return priceFetcher.getCurrentPrice(crypto)
                                    .flatMap(priceJson -> {
                                        try {
                                            JsonNode node = objectMapper.readTree(priceJson);
                                            BigDecimal currentPrice = new BigDecimal(node.get("price").asText());
                                            BigDecimal totalValue = amount.multiply(currentPrice);
                                            
                                            // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å
                                            Portfolio updatedPortfolio = portfolioService.addCryptoToPortfolio(currentPortfolio.getId(), crypto, amount);
                                            
                                            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É
                                            updatedPortfolio.setLastCryptoPrice(currentPrice);
                                            updatedPortfolio.setLastCryptoPriceTimestamp(System.currentTimeMillis() / 1000);
                                            portfolioService.save(updatedPortfolio);
                                            
                                            return Mono.just(String.format("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ %.6f %s\n" +
                                                    "üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.2f %s\n" +
                                                    "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: %.2f %s\n\n" +
                                                    "üìä –í—Å–µ–≥–æ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: %.6f %s\n" +
                                                    "üíé –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞: %.2f %s",
                                                    amount.setScale(6, RoundingMode.FLOOR), crypto.getCode(),
                                                    currentPrice, Currency.Fiat.getCurrentFiat().getCode(),
                                                    totalValue, Currency.Fiat.getCurrentFiat().getCode(),
                                                    amount.setScale(6, RoundingMode.HALF_UP), crypto.getCode(),
                                                    totalValue, Currency.Fiat.getCurrentFiat().getCode()));
                                        } catch (Exception e) {
                                            return Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã: " + e.getMessage());
                                        }
                                    });
                            });
                    });
            } else {
                portfolio = portfolios.stream()
                    .filter(p -> p.getCryptoCurrency() != null && p.getCryptoCurrency().equals(crypto))
                    .findFirst()
                    .get();
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            return Mono.zip(
                priceFetcher.getCurrentPrice(crypto),
                currencyConverter.getUsdToFiatRate(Currency.Fiat.getCurrentFiat())
            ).flatMap(tuple -> {
                try {
                    JsonNode node = objectMapper.readTree(tuple.getT1());
                    BigDecimal currentPriceUSD = new BigDecimal(node.get("price").asText());
                    BigDecimal conversionRate = tuple.getT2();
                    
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–∞–ª—é—Ç—É
                    BigDecimal currentPrice = currentPriceUSD.multiply(conversionRate)
                        .setScale(2, RoundingMode.HALF_UP);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å
                    Portfolio updatedPortfolio = portfolioService.addCryptoToPortfolio(portfolio.getId(), crypto, amount);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É (—Ö—Ä–∞–Ω–∏–º –≤ USD)
                    updatedPortfolio.setLastCryptoPrice(currentPriceUSD);
                    updatedPortfolio.setLastCryptoPriceTimestamp(System.currentTimeMillis() / 1000);
                    portfolioService.save(updatedPortfolio);
                    
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
                    BigDecimal totalValue = amount.multiply(currentPrice);
                    BigDecimal totalAmount = updatedPortfolio.getCount();
                    BigDecimal totalPortfolioValue = totalAmount.multiply(currentPrice);
                    
                    return Mono.just(String.format("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ %.6f %s\n" +
                            "üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.2f %s\n" +
                            "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: %.2f %s\n\n" +
                            "üìä –í—Å–µ–≥–æ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: %.6f %s\n" +
                            "üíé –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞: %.2f %s",
                            amount.setScale(6, RoundingMode.HALF_UP), crypto.getCode(),
                            currentPrice, Currency.Fiat.getCurrentFiat().getCode(),
                            totalValue, Currency.Fiat.getCurrentFiat().getCode(),
                            totalAmount.setScale(6, RoundingMode.HALF_UP), crypto.getCode(),
                            totalPortfolioValue, Currency.Fiat.getCurrentFiat().getCode()));
                } catch (Exception e) {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ", e);
                    return Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã");
                }
            });
        } catch (NumberFormatException e) {
            return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞");
        } catch (IllegalArgumentException e) {
            return Mono.just("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC");
        }
    }

    public Mono<String> handlerBalance(String chatId) {
        List<Portfolio> portfolios = portfolioService.getPortfoliosByChatId(chatId);
        if (portfolios.isEmpty()) {
            return Mono.just("‚ùå –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.");
        }

        final Portfolio portfolio = portfolios.get(0);
        if (portfolio.getCryptoCurrency() == null) {
            return Mono.just("–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.");
        }

        return Mono.zip(
            priceFetcher.getCurrentPrice(portfolio.getCryptoCurrency()),
            currencyConverter.getUsdToFiatRate(Currency.Fiat.getCurrentFiat())
        ).flatMap(tuple -> {
            try {
                JsonNode node = objectMapper.readTree(tuple.getT1());
                BigDecimal currentPriceUSD = new BigDecimal(node.get("price").asText());
                BigDecimal conversionRate = tuple.getT2();
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–∞–ª—é—Ç—É
                BigDecimal currentPrice = currentPriceUSD.multiply(conversionRate)
                    .setScale(2, RoundingMode.HALF_UP);
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
                BigDecimal totalValue = portfolio.getCount().multiply(currentPrice);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É (—Ö—Ä–∞–Ω–∏–º –≤ USD)
                Portfolio updatedPortfolio = portfolioService.save(portfolio);
                updatedPortfolio.setLastCryptoPrice(currentPriceUSD);
                updatedPortfolio.setLastCryptoPriceTimestamp(System.currentTimeMillis() / 1000);
                portfolioService.save(updatedPortfolio);
                
                return Mono.just(String.format("üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è:\n\n" +
                        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: %s\n" +
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %.6f\n" +
                        "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.2f %s\n" +
                        "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: %.2f %s",
                        portfolio.getCryptoCurrency().getCode(),
                        portfolio.getCount().setScale(6, RoundingMode.HALF_UP),
                        currentPrice, Currency.Fiat.getCurrentFiat().getCode(),
                        totalValue, Currency.Fiat.getCurrentFiat().getCode()));
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ", e);
                return Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã");
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /remove
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
     */
    private String handlerRemove() {
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞>\n" +
               "–ü—Ä–∏–º–µ—Ä: /remove 0.42 ETH\n" +
               "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC";
    }

    public Mono<String> handlerRemove(String[] args, String chatId) {
        if (args.length != 2) {
            return Mono.just(handlerRemove());
        }

        try {
            BigDecimal amount = new BigDecimal(args[0]);
            if (amount.compareTo(BigDecimal.ZERO) <= 0) {
                return Mono.just("‚ùå –ù–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!");
            }
            String cryptoCode = args[1].toUpperCase();
            Currency.Crypto crypto = Currency.Crypto.valueOf(cryptoCode);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            List<Portfolio> portfolios = portfolioService.getPortfoliosByChatId(chatId);
            final Portfolio portfolio = portfolios.stream()
                .filter(p -> p.getCryptoCurrency() != null && p.getCryptoCurrency().equals(crypto))
                .findFirst()
                .orElse(null);

            if (portfolio == null) {
                return Mono.just(String.format("‚ùå –í –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã %s", crypto.getCode()));
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            if (portfolio.getCount().compareTo(amount) < 0) {
                return Mono.just(String.format("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í –ø–æ—Ä—Ç—Ñ–µ–ª–µ: %.6f %s", 
                    portfolio.getCount().setScale(6, RoundingMode.HALF_UP), crypto.getCode()));
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            return Mono.zip(
                priceFetcher.getCurrentPrice(crypto),
                currencyConverter.getUsdToFiatRate(Currency.Fiat.getCurrentFiat())
            ).flatMap(tuple -> {
                try {
                    JsonNode node = objectMapper.readTree(tuple.getT1());
                    BigDecimal currentPriceUSD = new BigDecimal(node.get("price").asText());
                    BigDecimal conversionRate = tuple.getT2();
                    
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–∞–ª—é—Ç—É
                    BigDecimal currentPrice = currentPriceUSD.multiply(conversionRate)
                        .setScale(2, RoundingMode.HALF_UP);
                    
                    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
                    Portfolio updatedPortfolio = portfolioService.removeCryptoFromPortfolio(portfolio.getId(), crypto, amount);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É (—Ö—Ä–∞–Ω–∏–º –≤ USD)
                    updatedPortfolio.setLastCryptoPrice(currentPriceUSD);
                    updatedPortfolio.setLastCryptoPriceTimestamp(System.currentTimeMillis() / 1000);
                    portfolioService.save(updatedPortfolio);
                    
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
                    BigDecimal totalValue = amount.multiply(currentPrice);
                    BigDecimal totalAmount = updatedPortfolio.getCount();
                    BigDecimal totalPortfolioValue = totalAmount.multiply(currentPrice);
                    
                    return Mono.just(String.format("‚úÖ –£–¥–∞–ª–µ–Ω–æ %.6f %s\n\n" +
                            "üìä –í—Å–µ–≥–æ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: %.6f %s\n" +
                            "üíé –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞: %.2f %s",
                            amount.setScale(6, RoundingMode.HALF_UP), crypto.getCode(),
                            totalAmount.setScale(6, RoundingMode.HALF_UP), crypto.getCode(),
                            totalPortfolioValue, Currency.Fiat.getCurrentFiat().getCode()));
                } catch (Exception e) {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ", e);
                    return Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã");
                }
            });
        } catch (NumberFormatException e) {
            return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞");
        } catch (IllegalArgumentException e) {
            return Mono.just("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC");
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /portfolio
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
     */
    public Mono<String> handlerPortfolio(String args, String chatId) {
        // This command expects 0 arguments
        String[] processedArgs = processArguments(args, 0);
        if (processedArgs == null) {
            return Mono.just("‚ùå –ö–æ–º–∞–Ω–¥–∞ /portfolio –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤");
        }
        return cryptoPortfolioManager.getPortfolioInfo(chatId);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get_portfolio_price
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
     */
    public Mono<String> handlerGetPortfolioPrice(String args, String chatId) {
        // This command expects 0 arguments
        String[] processedArgs = processArguments(args, 0);
        if (processedArgs == null) {
            return Mono.just("‚ùå –ö–æ–º–∞–Ω–¥–∞ /get_portfolio_price –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤");
        }
        return cryptoPortfolioManager.getPortfolioPriceInfo(chatId);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
     * @return –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
     */
    private String getAuthorsInfo() {
        return "–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤\n" +
               "‚Ä¢ –õ–æ–±–∞–Ω–æ–≤ –ü–∞–≤–µ–ª (@pmlobanov)\n" +
               "‚Ä¢ –ß–µ—Ä–µ–ø–Ω–æ–≤ –ú–∞–∫—Å–∏–º (@aofitasotr)\n" +
               "‚Ä¢ –ß—É—Ä–æ–≤–∞ –°–æ—Ñ—å—è (@SunnyChur)\n" +
               "                          - –°—Ç—É–¥–µ–Ω—Ç—ã 3 –∫—É—Ä—Å–∞ –°–ü–ë–ü–£ –ü–µ—Ç—Ä–∞ –í–µ–ª–∏–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è \n " +
               "                          - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏";
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /authors
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     * @return –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
     */
    public Mono<String> handlerAuthors(String args) {
        log.info("Processing arguments: '{}', expected count: 0", args);
        if (args == null || args.trim().isEmpty()) {
            log.info("Args are null or empty, returning empty array");
            return Mono.just(getAuthorsInfo());
        }
        return Mono.just("‚ùå –ö–æ–º–∞–Ω–¥–∞ /authors –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤");
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /delete_asset
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
     */
    private String handlerDeleteAsset() {
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_asset <–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞>\n" +
               "–ü—Ä–∏–º–µ—Ä: /delete_asset ETH\n" +
               "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC";
    }

    public Mono<String> handlerDeleteAsset(String args, String chatId) {
        String[] processedArgs = processArguments(args, 1);
        if (processedArgs == null) {
            return Mono.just(handlerDeleteAsset());
        }

        try {
            String cryptoCode = processedArgs[0].toUpperCase();
            Currency.Crypto crypto = Currency.Crypto.valueOf(cryptoCode);
            return cryptoPortfolioManager.deleteAsset(chatId, crypto);
        } catch (IllegalArgumentException e) {
            return Mono.just("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: BTC, ETH, SOL, XRP, ADA, DOGE, AVAX, NEAR, LTC");
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /delete_all_assets
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
     */
    private String handlerDeleteAllAssets() {
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_all_assets\n" +
               "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.";
    }

    public Mono<String> handlerDeleteAllAssets(String args, String chatId) {
        String[] processedArgs = processArguments(args, 0);
        if (processedArgs == null) {
            return Mono.just(handlerDeleteAllAssets());
        }

        return cryptoPortfolioManager.deleteAllAssets(chatId);
    }

    public Mono<String> handlerGetPortfolioAssets(String args, String chatId) {
        // This command expects 0 arguments
        String[] processedArgs = processArguments(args, 0);
        if (processedArgs == null) {
            return Mono.just("‚ùå –ö–æ–º–∞–Ω–¥–∞ /get_assets_price –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤");
        }
        return cryptoPortfolioManager.getAssetsPrice(chatId);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin_create
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    public Mono<String> handlerAdminCreate(String[] args, String chatId) {
        if (args.length != 1) {
            return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
                           "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_create <username>");
        }

        String username = args[0];
        return adminService.createAdmin(username)
            .map(admin -> "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä " + username + " —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.\n" +
                         "API –∫–ª—é—á –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
            .onErrorResume(e -> Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " + e.getMessage()));
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin_refresh_key
     * –û–±–Ω–æ–≤–ª—è–µ—Ç API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    public Mono<String> handlerAdminRefreshKey(String[] args, String chatId) {
        if (args.length != 1) {
            return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
                           "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_refresh_key <username>");
        }

        String username = args[0];
        return adminService.refreshApiKey(username)
            .map(admin -> "‚úÖ API –∫–ª—é—á –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ " + username + " —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.\n" +
                         "–ù–æ–≤—ã–π –∫–ª—é—á –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
            .switchIfEmpty(Mono.just("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: " + username))
            .onErrorResume(e -> Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞: " + e.getMessage()));
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin_deactivate
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    public Mono<String> handlerAdminDeactivate(String[] args, String chatId) {
        if (args.length != 1) {
            return Mono.just("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n" +
                           "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_deactivate <username>");
        }

        String username = args[0];
        return adminService.deactivateAdmin(username)
            .map(success -> success ? 
                "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä " + username + " —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω." :
                "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: " + username)
            .onErrorResume(e -> Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " + e.getMessage()));
    }
}
