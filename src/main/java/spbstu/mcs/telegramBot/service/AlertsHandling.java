package spbstu.mcs.telegramBot.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.retry.Retry;
import spbstu.mcs.telegramBot.DB.services.NotificationService;
import spbstu.mcs.telegramBot.DB.services.UserService;
import spbstu.mcs.telegramBot.cryptoApi.CurrencyConverter;
import spbstu.mcs.telegramBot.cryptoApi.PriceFetcher;
import spbstu.mcs.telegramBot.model.Currency.Crypto;
import spbstu.mcs.telegramBot.model.Notification;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–æ–≤—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏.
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è:
 * - –£—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
 */
@Service
public class AlertsHandling {
    private static final Logger log = LoggerFactory.getLogger(AlertsHandling.class);

    private final ObjectMapper objectMapper;
    private final CurrencyConverter currencyConverter;
    private final PriceFetcher priceFetcher;
    private final TelegramBotService telegramBotService;
    private final NotificationService notificationService;
   // private final NotificationRepository notificationRepository;
    private final UserService userService;

    @Autowired
    public AlertsHandling(ObjectMapper objectMapper,
                          CurrencyConverter currencyConverter,
                          PriceFetcher priceFetcher,
                          TelegramBotService telegramBotService,
                          NotificationService notificationService,
                          UserService userService) {
        log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ AlertsHandling...");
        this.objectMapper = objectMapper;
        this.currencyConverter = currencyConverter;
        this.priceFetcher = priceFetcher;
        this.telegramBotService = telegramBotService;
        this.notificationService = notificationService;
        this.userService = userService;
        log.info("–°–µ—Ä–≤–∏—Å AlertsHandling —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π —Ü–µ–Ω—ã.
     * –ï—Å–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–ª–µ—Ä—Ç –ø–æ —Ü–µ–Ω–∞–º, –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.
     *
     * @param cryptoCurrency –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
     * @param maxPrice –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
     * @param minPrice –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
     * @return Mono<String> –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞
     */
    public Mono<String> setAlertVal(Crypto cryptoCurrency, BigDecimal maxPrice, BigDecimal minPrice, String chatId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        if (maxPrice.scale() > 2 || minPrice.scale() > 2) {
            return Mono.just("‚ùå –¶–µ–Ω–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω—ã –Ω–µ —Ä–∞–≤–Ω—ã –Ω—É–ª—é
        if (maxPrice.compareTo(BigDecimal.ZERO) <= 0 || minPrice.compareTo(BigDecimal.ZERO) <= 0) {
            return Mono.just("‚ùå –¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É —Ü–µ–Ω—ã (1 –º–∏–ª–ª–∏–∞—Ä–¥)
        BigDecimal MAX_PRICE = new BigDecimal("1000000000");
        if (maxPrice.compareTo(MAX_PRICE) > 0 || minPrice.compareTo(MAX_PRICE) > 0) {
            return Mono.just("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1 000 000 000");
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ VALUE –∞–ª–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        return notificationService.getAllUserAlerts(chatId)
                .filter(alert -> alert.getThresholdType() == Notification.ThresholdType.VALUE 
                        && alert.getCryptoCurrency() == cryptoCurrency)
                .next()
                .flatMap(existingAlert -> notificationService.delete(existingAlert))
                .then(userService.getUserByChatId(chatId))
                .flatMap(user -> Mono.zip(
                        priceFetcher.getCurrentPrice(cryptoCurrency),
                        currencyConverter.getUsdToFiatRate(user.getFiatCurrency())
                ).flatMap(tuple -> {
                    try {
                        String priceJson = tuple.getT1();
                        BigDecimal conversionRate = tuple.getT2();

                        JsonNode jsonNode = objectMapper.readTree(priceJson);
                        BigDecimal currentPriceUSD = new BigDecimal(jsonNode.get("price").asText());
                        long timestamp = jsonNode.get("timestamp").asLong();

                        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
                        BigDecimal currentPrice = currentPriceUSD.multiply(conversionRate)
                                .setScale(2, RoundingMode.HALF_UP);

                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –≤ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç–µ
                        BigDecimal maxPriceInFiat = maxPrice;
                        BigDecimal minPriceInFiat = minPrice;

                        log.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ VALUE –∞–ª–µ—Ä—Ç–∞ –¥–ª—è {}: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞={} USD ({} {})",
                                cryptoCurrency, currentPriceUSD, currentPrice, user.getFiatCurrency().getCode());

                        Notification notification = new Notification(
                                null,
                                cryptoCurrency,
                                user.getFiatCurrency(),
                                Notification.ThresholdType.VALUE,
                                true,
                                chatId,
                                maxPriceInFiat.doubleValue(),
                                minPriceInFiat.doubleValue(),
                                currentPrice.doubleValue()
                        );

                        notification.setStartTimestamp(timestamp);

                        return notificationService.createUserNotification(notification)
                                .then(Mono.just(String.format("‚úÖ –ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è %s\n" +
                                                "üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.2f %s\n" +
                                                "üìà –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: %.2f %s\n" +
                                                "üìâ –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: %.2f %s",
                                        cryptoCurrency.getCode(),
                                        currentPrice, notification.getFiatCurrency().getCode(),
                                        maxPriceInFiat, notification.getFiatCurrency().getCode(),
                                        minPriceInFiat, notification.getFiatCurrency().getCode())));
                    } catch (Exception e) {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ VALUE –∞–ª–µ—Ä—Ç–∞: {}", e.getMessage());
                        return Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–ª–µ—Ä—Ç–∞: " + e.getMessage());
                    }
                }));
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã.
     * –ï—Å–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–ª–µ—Ä—Ç –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º, –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.
     *
     * @param cryptoCurrency –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
     * @param upPercent –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
     * @param downPercent –ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
     * @return Mono<String> –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞
     */
    public Mono<String> setAlertPerc(Crypto cryptoCurrency, BigDecimal upPercent, BigDecimal downPercent, String chatId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        if (upPercent.scale() > 2 || downPercent.scale() > 2) {
            return Mono.just("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –Ω–µ —Ä–∞–≤–Ω—ã –Ω—É–ª—é
        if (upPercent.compareTo(BigDecimal.ZERO) <= 0 || downPercent.compareTo(BigDecimal.ZERO) <= 0) {
            return Mono.just("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (100%)
        BigDecimal MAX_PERCENT = new BigDecimal("100");
        if (upPercent.compareTo(MAX_PERCENT) > 0 || downPercent.compareTo(MAX_PERCENT) > 0) {
            return Mono.just("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%");
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PERCENT –∞–ª–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        return notificationService.getAllUserAlerts(chatId)
                .filter(alert -> alert.getThresholdType() == Notification.ThresholdType.PERCENT 
                        && alert.getCryptoCurrency() == cryptoCurrency)
                .next()
                .flatMap(existingAlert -> notificationService.delete(existingAlert))
                .then(userService.getUserByChatId(chatId))
                .flatMap(user -> Mono.zip(
                        priceFetcher.getCurrentPrice(cryptoCurrency),
                        currencyConverter.getUsdToFiatRate(user.getFiatCurrency())
                ).flatMap(tuple -> {
                    try {
                        String priceJson = tuple.getT1();
                        BigDecimal conversionRate = tuple.getT2();

                        JsonNode jsonNode = objectMapper.readTree(priceJson);
                        BigDecimal currentPriceUSD = new BigDecimal(jsonNode.get("price").asText());
                        long timestamp = jsonNode.get("timestamp").asLong();

                        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
                        BigDecimal currentPrice = currentPriceUSD.multiply(conversionRate)
                                .setScale(2, RoundingMode.HALF_UP);

                        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                        BigDecimal maxPriceInFiat = currentPrice.multiply(BigDecimal.ONE.add(upPercent.divide(new BigDecimal("100"))))
                                .setScale(2, RoundingMode.HALF_UP);
                        BigDecimal minPriceInFiat = currentPrice.multiply(BigDecimal.ONE.subtract(downPercent.divide(new BigDecimal("100"))))
                                .setScale(2, RoundingMode.HALF_UP);

                        log.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PERCENT –∞–ª–µ—Ä—Ç–∞ –¥–ª—è {}: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞={} USD ({} {})",
                                cryptoCurrency, currentPriceUSD, currentPrice, user.getFiatCurrency().getCode());

                        Notification notification = new Notification(
                                null,
                                cryptoCurrency,
                                user.getFiatCurrency(),
                                Notification.ThresholdType.PERCENT,
                                true,
                                chatId,
                                maxPriceInFiat.doubleValue(),
                                minPriceInFiat.doubleValue(),
                                currentPrice.doubleValue()
                        );

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
                        notification.setUpPercent(upPercent.doubleValue());
                        notification.setDownPercent(downPercent.doubleValue());
                        notification.setStartTimestamp(timestamp);

                        return notificationService.createUserNotification(notification)
                                .then(Mono.just(String.format("‚úÖ –ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è %s\n" +
                                                "üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.2f %s\n" +
                                                "üìà –†–æ—Å—Ç: +%.2f%%\n" +
                                                "üìâ –ü–∞–¥–µ–Ω–∏–µ: -%.2f%%\n" +
                                                "üìä –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: %.2f %s\n" +
                                                "üìä –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: %.2f %s",
                                        cryptoCurrency.getCode(),
                                        currentPrice, notification.getFiatCurrency().getCode(),
                                        upPercent, downPercent,
                                        maxPriceInFiat, notification.getFiatCurrency().getCode(),
                                        minPriceInFiat, notification.getFiatCurrency().getCode())));
                    } catch (Exception e) {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PERCENT –∞–ª–µ—Ä—Ç–∞: {}", e.getMessage());
                        return Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–ª–µ—Ä—Ç–∞: " + e.getMessage());
                    }
                }));
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ EMA (Exponential Moving Average).
     * –ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ SMA –∑–∞ 3 –Ω–µ–¥–µ–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∫–∞–∫ EMA.
     * –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç EMA –ø–æ —Ñ–æ—Ä–º—É–ª–µ.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
     *
     * @param cryptoCurrency –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
     * @return Mono<String> JSON-—Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –∏ timestamp —É—Å—Ç–∞–Ω–æ–≤–∫–∏
     */
    public Mono<String> setAlertEMA(Crypto cryptoCurrency, String chatId) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ EMA –∞–ª–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return notificationService.getAllUserAlerts(chatId)
                .filter(alert -> alert.getThresholdType() == Notification.ThresholdType.EMA 
                        && alert.getCryptoCurrency() == cryptoCurrency)
                .next()
                .flatMap(existingAlert -> notificationService.delete(existingAlert))
                .then(userService.getUserByChatId(chatId))
                .flatMap(user -> Mono.zip(
                        priceFetcher.getCurrentPrice(cryptoCurrency),
                        currencyConverter.getUsdToFiatRate(user.getFiatCurrency())
                ).flatMap(tuple -> {
                    try {
                        String priceJson = tuple.getT1();
                        BigDecimal conversionRate = tuple.getT2();

                        JsonNode jsonNode = objectMapper.readTree(priceJson);
                        BigDecimal currentPriceUSD = new BigDecimal(jsonNode.get("price").asText());
                        long startTimestamp = jsonNode.get("timestamp").asLong();

                        // –ü–æ–ª—É—á–∞–µ–º 20 –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω (–æ–¥–Ω–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 –¥–Ω–µ–π)
                        int EMA_PERIOD = 20;
                        List<Mono<BigDecimal>> priceRequests = new ArrayList<>();
                        for (int i = 0; i < EMA_PERIOD; i++) {
                            long ts = startTimestamp - (i * 24 * 60 * 60);
                            Mono<BigDecimal> priceMono = priceFetcher.getSymbolPriceByTime(cryptoCurrency, ts)
                                    .flatMap(this::parsePrice)
                                    .retryWhen(Retry.fixedDelay(2, Duration.ofSeconds(1))
                                        .doBeforeRetry(signal -> 
                                            log.warn("Retrying database operation after error: {}", signal.failure().getMessage())
                                        ))
                                    .onErrorResume(e -> Mono.just(BigDecimal.ZERO));
                            priceRequests.add(priceMono);
                        }

                        return Flux.merge(priceRequests)
                                .collectList()
                                .flatMap(prices -> {
                                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SMA
                                    BigDecimal sum = prices.stream().reduce(BigDecimal.ZERO, BigDecimal::add);
                                    BigDecimal sma = sum.divide(new BigDecimal(prices.size()), 2, RoundingMode.HALF_UP);

                                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
                                    BigDecimal currentPriceFiat = currentPriceUSD.multiply(conversionRate).setScale(2, RoundingMode.HALF_UP);
                                    BigDecimal smaFiat = sma.multiply(conversionRate).setScale(2, RoundingMode.HALF_UP);

                                    Notification notification = new Notification(
                                            null,
                                            cryptoCurrency,
                                            user.getFiatCurrency(),
                                            Notification.ThresholdType.EMA,
                                            false, // isActive –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                                            chatId,
                                            null, // upperBoundary –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                                            null, // lowerBoundary –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                                            currentPriceFiat.doubleValue() // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ —Ñ–∏–∞—Ç–µ
                                    );
                                    notification.setStartEMA(smaFiat.doubleValue());
                                    notification.setCurrentEMA(smaFiat.doubleValue());
                                    notification.setStartTimestamp(startTimestamp);
                                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ isAbove
                                    notification.setIsAbove(currentPriceFiat.compareTo(smaFiat) > 0);

                                    return notificationService.createUserNotification(notification)
                                            .then(Mono.just(String.format("‚úÖ –ê–ª–µ—Ä—Ç EMA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è %s\n" +
                                                            "üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.2f %s\n" +
                                                            "üìà –ù–∞—á–∞–ª—å–Ω–æ–µ EMA (SMA 20): %.2f %s",
                                                    cryptoCurrency.getCode(),
                                                    currentPriceFiat, notification.getFiatCurrency().getCode(),
                                                    smaFiat, notification.getFiatCurrency().getCode())));
                                });
                    } catch (Exception e) {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ EMA –∞–ª–µ—Ä—Ç–∞: {}", e.getMessage());
                        return Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–ª–µ—Ä—Ç–∞: " + e.getMessage());
                    }
                }));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.
     * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è.
     */
    @Scheduled(fixedRate = 300000) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    public void checkAlerts() {
        log.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤...");
        notificationService.getAllActiveAlerts()
                .flatMap(notification -> {
                    log.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è {} (—Ç–∏–ø: {})",
                            notification.getCryptoCurrency(), notification.getThresholdType());

                    return priceFetcher.getCurrentPrice(notification.getCryptoCurrency())
                            .flatMap(priceJson -> {
                                try {
                                    JsonNode node = objectMapper.readTree(priceJson);
                                    BigDecimal currentPrice = new BigDecimal(node.get("price").asText());
                                    long timestamp = node.get("timestamp").asLong();

                                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                    return currencyConverter.getUsdToFiatRate(notification.getFiatCurrency())
                                            .flatMap(conversionRate -> {
                                                BigDecimal priceInTargetCurrency = currentPrice.multiply(conversionRate)
                                                        .setScale(2, RoundingMode.HALF_UP);

                                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
                                                boolean isTriggered = false;
                                                String message = "";

                                                switch (notification.getThresholdType()) {
                                                    case VALUE -> {
                                                        if (priceInTargetCurrency.compareTo(BigDecimal.valueOf(notification.getUpperBoundary())) >= 0) {
                                                            isTriggered = true;
                                                            message = String.format("üö® –¶–µ–Ω–∞ %s –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, —Å–µ–π—á–∞—Å –æ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: %.2f %s",
                                                                    notification.getCryptoCurrency().getCode(),
                                                                    priceInTargetCurrency, notification.getFiatCurrency().getCode());
                                                        } else if (priceInTargetCurrency.compareTo(BigDecimal.valueOf(notification.getLowerBoundary())) <= 0) {
                                                            isTriggered = true;
                                                            message = String.format("üö® –¶–µ–Ω–∞ %s –æ–ø—É—Å—Ç–∏–ª–∞—Å—å –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã, —Å–µ–π—á–∞—Å –æ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: %.2f %s",
                                                                    notification.getCryptoCurrency().getCode(),
                                                                    priceInTargetCurrency, notification.getFiatCurrency().getCode());
                                                        }
                                                    }
                                                    case PERCENT -> {
                                                        BigDecimal startPrice = BigDecimal.valueOf(notification.getStartPrice());
                                                        BigDecimal percentChange = priceInTargetCurrency.subtract(startPrice)
                                                                .divide(startPrice, 4, RoundingMode.HALF_UP)
                                                                .multiply(new BigDecimal("100"));

                                                        if (percentChange.compareTo(BigDecimal.valueOf(notification.getUpPercent())) >= 0) {
                                                            isTriggered = true;
                                                            message = String.format("üö® –¶–µ–Ω–∞ %s –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ %.2f%% (–¥–æ %.2f %s)",
                                                                    notification.getCryptoCurrency().getCode(),
                                                                    percentChange, priceInTargetCurrency, notification.getFiatCurrency().getCode());
                                                        } else if (percentChange.compareTo(BigDecimal.valueOf(-notification.getDownPercent())) <= 0) {
                                                            isTriggered = true;
                                                            message = String.format("üö® –¶–µ–Ω–∞ %s —É–ø–∞–ª–∞ –Ω–∞ %.2f%% (–¥–æ %.2f %s)",
                                                                    notification.getCryptoCurrency().getCode(),
                                                                    percentChange.abs(), priceInTargetCurrency, notification.getFiatCurrency().getCode());
                                                        }
                                                    }
                                                    case EMA -> {
                                                        // –û–±–Ω–æ–≤–ª—è–µ–º EMA
                                                        updateEMA(notification, priceInTargetCurrency);
                                                    }
                                                }

                                                if (isTriggered) {
                                                    notification.setIsActive(false);
                                                    notification.setTriggerTimestamp(timestamp);
                                                    return notificationService.save(notification)
                                                            .then(telegramBotService.sendResponseAsync(notification.getChatId(), message))
                                                            .doOnSuccess(v -> log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–ª–µ—Ä—Ç–∞ {} (—Ç–∏–ø: {})",
                                                                    notification.getCryptoCurrency(), notification.getThresholdType()))
                                                            .doOnError(e -> log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–ª–µ—Ä—Ç–∞ {} (—Ç–∏–ø: {}): {}",
                                                                    notification.getCryptoCurrency(), notification.getThresholdType(), e.getMessage()));
                                                }

                                                return Mono.empty();
                                            });
                                } catch (Exception e) {
                                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–∞: {}", e.getMessage());
                                    return Mono.empty();
                                }
                            });
                })
                .subscribe(
                        null,
                        error -> log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–æ–≤: {}", error.getMessage()),
                        () -> log.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                );
    }

    private Mono<BigDecimal> parsePrice(String priceJson) {
        return Mono.fromCallable(() -> {
            JsonNode jsonNode = objectMapper.readTree(priceJson);
            String priceStr = jsonNode.get("price").asText();
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏
            priceStr = priceStr.replaceAll("[^0-9.]", "");
            return new BigDecimal(priceStr);
        });
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.
     *
     * @return Mono<String> JSON-—Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–ª–µ—Ä—Ç–æ–≤
     */
    public Mono<String> showAlerts() {
        return notificationService.getAllActiveAlerts()
                .collectList()
                .flatMap(activeAlerts -> {
                    try {
                        ObjectNode result = objectMapper.createObjectNode();
                        ArrayNode alertsArray = objectMapper.createArrayNode();

                        for (Notification notification : activeAlerts) {
                            ObjectNode alertNode = objectMapper.createObjectNode();
                            alertNode.put("type", notification.getThresholdType().toString());
                            alertNode.put("symbol", notification.getCryptoCurrency().toString());
                            alertNode.put("fiat", notification.getFiatCurrency().getCode());
                            alertNode.put("threshold", notification.getActiveThreshold());
                            alertNode.put("isActive", notification.isActive());
                            alertsArray.add(alertNode);
                        }
                        result.set("alerts", alertsArray);

                        return Mono.just(objectMapper.writeValueAsString(result));
                    } catch (Exception e) {
                        log.error("Error showing alerts: {}", e.getMessage());
                        return Mono.error(new RuntimeException("Error showing alerts: " + e.getMessage()));
                    }
                });
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –ø–æ —Å–∏–º–≤–æ–ª—É –∏ —Ç–∏–ø—É.
     *
     * @param symbol –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
     * @param type –¢–∏–ø –∞–ª–µ—Ä—Ç–∞
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return Mono<String> –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    public Mono<String> deleteAlert(String symbol, String type, String chatId) {
        try {
            String cryptoCode = symbol.split("-")[0];
            Crypto cryptoCurrency = Crypto.valueOf(cryptoCode);

            return notificationService.getAllUserAlerts(chatId)
                    .filter(alert -> alert.getThresholdType().toString().equals(type))
                    .filter(alert -> alert.getCryptoCurrency().equals(cryptoCurrency))
                    .next()
                    .flatMap(alert -> notificationService.delete(alert)
                            .then(Mono.just("‚úÖ –ê–ª–µ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")))
                    .switchIfEmpty(Mono.just("‚ùå –ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        } catch (Exception e) {
            log.error("Error deleting alert: {}", e.getMessage());
            return Mono.just("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞: " + e.getMessage());
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
     * @return Mono<Void> –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    public Mono<Void> deleteAllAlerts(String chatId) {
        return notificationService.deleteAllAlerts(chatId)
                .then(telegramBotService.sendResponseAsync(chatId, "–í—Å–µ –∞–ª–µ—Ä—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã."))
                .then();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º EMA
    private void updateEMA(Notification alert, BigDecimal currentPrice) {
        BigDecimal currentEMA = BigDecimal.valueOf(alert.getCurrentEMA());
        BigDecimal newEMA = currentEMA.multiply(new BigDecimal("0.95"))
                .add(currentPrice.multiply(new BigDecimal("0.05")));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA
        alert.setCurrentEMA(newEMA.doubleValue());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA
        checkEMACrossing(alert, currentPrice);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA
    private void checkEMACrossing(Notification alert, BigDecimal currentPrice) {
        BigDecimal ema = BigDecimal.valueOf(alert.getCurrentEMA());
        boolean isCurrentlyAbove = currentPrice.compareTo(ema) > 0;
        
        // –ï—Å–ª–∏ isAbove –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        if (alert.getIsAbove() == null) {
            alert.setIsAbove(isCurrentlyAbove);
            notificationService.save(alert);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–∏–∑–æ—à–ª–æ –ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        if (alert.getIsAbove() != isCurrentlyAbove) {
            alert.setIsAbove(isCurrentlyAbove);
            String trendMessage = isCurrentlyAbove ?
                    String.format("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –¥–ª—è %s\n" +
                                    "üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.2f %s\n" +
                                    "üìà EMA: %.2f %s",
                            alert.getCryptoCurrency().getCode(),
                            currentPrice, alert.getFiatCurrency().getCode(),
                            ema, alert.getFiatCurrency().getCode()) :
                    String.format("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –¥–ª—è %s\n" +
                                    "üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.2f %s\n" +
                                    "üìâ EMA: %.2f %s",
                            alert.getCryptoCurrency().getCode(),
                            currentPrice, alert.getFiatCurrency().getCode(),
                            ema, alert.getFiatCurrency().getCode());

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏
            telegramBotService.sendResponseAsync(alert.getChatId(), trendMessage)
                    .subscribe(
                            null,
                            error -> log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–¥–µ: {}", error.getMessage())
                    );
        }

        notificationService.save(alert);
    }

    // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    long currentTime = System.currentTimeMillis() / 1000;
} 