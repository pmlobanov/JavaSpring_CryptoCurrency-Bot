version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "${ZOOKEEPER_PORT:-2181}:${ZOOKEEPER_PORT:-2181}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT:-2181}
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
      - "${KAFKA_INTERNAL_PORT}:${KAFKA_INTERNAL_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_INTERNAL_PORT},PLAINTEXT_HOST://localhost:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_INTERNAL_PORT},PLAINTEXT_HOST://0.0.0.0:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: mongo --eval 'db.runCommand("ping").ok' --quiet mongodb:${MONGO_PORT}/admin --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    command: ["--auth", "--port", "${MONGO_PORT}"]
    networks:
      - app-network

  vault:
    image: hashicorp/vault:1.15
    container_name: vault
    ports:
      - "${VAULT_PORT}:${VAULT_PORT}"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:${VAULT_PORT}
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/file
    networks:
      - app-network
    command: server -dev

  vault-init:
    image: hashicorp/vault:1.15
    depends_on:
      - vault
    entrypoint: ["sh", "./vault-init.sh"]
    environment:
      - VAULT_ADDR=http://vault:${VAULT_PORT}
      - VAULT_TOKEN=${VAULT_TOKEN}
      - VAULT_PORT=${VAULT_PORT}
      - KAFKA_PORT=${KAFKA_PORT}
      - KAFKA_INTERNAL_PORT=${KAFKA_INTERNAL_PORT}
      - MONGO_PORT=${MONGO_PORT}
    volumes:
      - ./vault-init.sh:/vault-init.sh:ro
    networks:
      - app-network
    restart: "on-failure"

  app:
    build: .
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    environment:
      - SERVER_PORT=${SERVER_PORT}
      - VAULT_PORT=${VAULT_PORT}
      - VAULT_TOKEN=${VAULT_TOKEN}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - kafka
      - vault
    networks:
      - app-network
    restart: "on-failure"

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  vault_data:
    driver: local